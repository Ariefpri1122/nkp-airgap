---
- hosts: ["nkp"]
  become: true
  tasks:
    - ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - zip
        - unzip
        - tar
        - curl
        - wget
        - git
    - command:
        cmd: ethtool --offload ens3 rx-gro-hw off
    - command:
        cmd: nmcli c modify ens3 ethtool.feature-rx-gro-hw off

- hosts: ["nkp-airgap"]
  become: true
  vars:
    docker_insecure_registries_enabled: false
    path_downloaded_airgap: /tmp/
    airgap_filename: nkp-airgapped-bundle_linux_amd64.tar.gz
  tasks:
    - name: Prepare Private Registry
      block:
      - ansible.builtin.package:
          name: "{{ item }}"
        loop:
          - python3-pip
      - ansible.builtin.pip:
          name: cryptography
          executable: pip3
      - ansible.builtin.file:
          path: "{{ item }}"
          state: directory
          mode: '0755'
        loop:
          - certs
      - openssl_privatekey:
          path: 'certs/domain.key'
          size: 4096
      - openssl_csr:
          path: 'certs/domain.crt'
          privatekey_path: 'certs/domain.key'
          country_name: '{{ selfsigned_cert.country_id }}'
          organization_name: '{{ selfsigned_cert.organization_name }}'
          email_address: '{{ selfsigned_cert.email_address }}'
          common_name: '{{ selfsigned_cert.domain_wildcard }}'
          subject_alt_name: 'DNS:{{ selfsigned_cert.domain_wildcard }}'
      - openssl_certificate:
          path: certs/domain.crt
          privatekey_path: certs/domain.key
          provider: selfsigned
      - include_role: 
          name: dimmaryanto93.docker
      - ansible.builtin.file:
          path: "/etc/docker/certs.d/{{ airgap_domain }}"
          state: directory
          mode: '0755'
          recurse: yes
      - ansible.builtin.copy:
          src: certs/domain.crt
          dest: "/etc/docker/certs.d/{{ airgap_domain }}/registry-ca.crt"
          remote_src: yes
      - ansible.builtin.copy:
          src: certs/domain.key
          dest: "/etc/docker/certs.d/{{ airgap_domain }}/registry-ca.key"
          remote_src: yes
    - name: Running private registry
      block:
        - ansible.builtin.file:
            path: "/etc/openregistry/{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - certs
            - auth
        - ansible.builtin.copy:
            src: certs/domain.crt
            dest: "/etc/openregistry/certs/registry-ca.crt"
            remote_src: yes
        - ansible.builtin.copy:
            src: certs/domain.key
            dest: "/etc/openregistry/certs/registry-ca.key"
            remote_src: yes
        - shell: "docker run --rm --entrypoint htpasswd xmartlabs/htpasswd -Bbn '{{ registry.username }}' '{{ registry.password }}' | tee /etc/openregistry/auth/htpasswd"
        - docker_container:
            name: DockerRegistry
            image: registry:2
            state: started
            restart: yes
            volumes:
              - "/mnt/registry:/var/lib/registry:rw"
              - "/etc/openregistry/auth:/auth"
              - "/etc/openregistry/certs:/certs"
            ports:
              - "5000:5000"
            env:
              REGISTRY_AUTH: htpasswd
              REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
              REGISTRY_AUTH_HTPASSWD_PATH: "/auth/htpasswd"
              REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/registry-ca.crt"
              REGISTRY_HTTP_TLS_KEY: "/certs/registry-ca.key"

    - name: Airgap file bundle
      block:
      - name: Check the file airgap was exists 
        stat:
          path: "{{ path_downloaded_airgap }}/{{ airgap_filename }}"
        register: file_nkp_airgap_uploaded
      - ansible.builtin.get_url:
          url: "{{ download_airgap_url }}"
          dest: "{{ path_downloaded_airgap }}/{{ airgap_filename }}"
        when: 
          - direct_download == true
          - not file_nkp_airgap_uploaded.stat.exists
      - copy:
          src: "{{ upload_airgap_url }}"
          dest: "{{ path_downloaded_airgap }}/{{ airgap_filename }}"
        when: 
          - direct_download == false
          - not file_nkp_airgap_uploaded.stat.exists
      - ansible.builtin.file:
          path: "/opt/nkp-airgap"
          state: directory
          mode: '7777'
      - name: Extract NKP airgaped bundle
        ansible.builtin.unarchive:
          src: '{{ path_downloaded_airgap }}/{{ airgap_filename }}'
          dest: '/opt/nkp-airgap'
          remote_src: yes
    - name: Publish file bundle into private registry
      block:
      - shell: "ls -d /opt/nkp-airgap/nkp-v* | tail -n 1"
        register: nkp_airgap_dir_loc
      - shell: "nkp push "
        register: nkp_airgap_dir_loc

- hosts: ["nkp-bastion"]
  become: true
  vars:
    helm_version: 'v3.16.3'
    kubectl_download_filetype: 'archive'
    kubectl_version: '1.29.9'
    kubectl_tmp_directory: '/tmp'
    path_downloaded_airgap: /tmp
    nkp_cli_dir_path: /opt/nkp-cli
    nkp_filename: nkp-cli_linux_amd64.tar.gz
    kib_filename: kib_linux_amd64.tar.gz
  tasks:
    - include_role: 
        name: dimmaryanto93.kubectl
    - include_role: 
        name: dimmaryanto93.helm_charts
    - name: Install and configure docker
      block:
        - include_role: 
            name: dimmaryanto93.docker
        - ansible.builtin.file:
            path: "/etc/docker/certs.d/{{ airgap_domain }}"
            state: directory
            mode: '0755'
            recurse: yes
        - ansible.builtin.file:
            path: "/etc/docker/certs.d/{{ registry_domain }}"
            state: directory
            mode: '0755'
            recurse: yes
    - name: Download or upload konvoy image builder
      block:
        - name: Check the file Konvoy Image Builder was exists 
          stat:
            path: "{{ path_downloaded_airgap }}/{{ kib_filename }}"
          register: file_kib_uploaded
        - ansible.builtin.get_url:
            url: "{{ download_kib_url }}"
            dest: "{{ path_downloaded_airgap }}/{{ kib_filename }}"
          when: 
            - direct_download == true
            - not file_kib_uploaded.stat.exists
        - copy:
            src: "{{ upload_kib_path }}"
            dest: "{{ path_downloaded_airgap }}/{{ kib_filename }}"
          when: 
            - direct_download == false
            - not file_kib_uploaded.stat.exists
        - community.docker.docker_image_load:
            path: "{{ path_downloaded_airgap }}/{{ kib_filename }}"
          when:
            - not file_kib_uploaded.stat.exists
    - name: Download or Upload Airgap NKP
      block:
        - name: Check the file NKP Cli was exists 
          stat:
            path: "{{ path_downloaded_airgap }}/{{ nkp_filename }}"
          register: file_nkp_cli_uploaded
        - ansible.builtin.get_url:
            url: "{{ download_nkp_cli_url }}"
            dest: "{{ path_downloaded_airgap }}/{{ nkp_filename }}"
          when: 
            - direct_download == true
            - not file_nkp_cli_uploaded.stat.exists
        - copy:
            src: "{{ upload_nkp_cli_path }}"
            dest: "{{ path_downloaded_airgap }}/{{ nkp_filename }}"
          when: 
            - direct_download == false
            - not file_nkp_cli_uploaded.stat.exists
        - ansible.builtin.file:
            path: "{{ nkp_cli_dir_path }}"
            state: directory
            mode: '0755'
        - name: Extract NKP cli
          ansible.builtin.unarchive:
            src: "{{ path_downloaded_airgap }}/{{ nkp_filename }}"
            dest: "{{ nkp_cli_dir_path }}"
            remote_src: yes
        - ansible.builtin.file:
            src: "{{ nkp_cli_dir_path }}/nkp"
            dest: "/usr/local/bin/nkp"
            state: link
- hosts: ["nkp-bastion"]
  tasks:
    - openssh_keypair:
        path: .ssh/id_ed25519
        type: ed25519
    - shell: |
        eval "$(ssh-agent)"
        ssh-add .ssh/id_ed25519
